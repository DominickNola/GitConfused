2/23/19
-Questions to bring up in Monday team meeting.
-Breaking down user stories into story points.
-Research on stacks in python.
Stack info:
http://interactivepython.org/courselib/static/pythonds/BasicDS/ImplementingaStackinPython.html

As a developer, I need to implement some of the integer operations because these are the easiest to start with.
Execute opcode integer operations.
Should this be in python or java (Since it is opcode does it matter?)

Implement integer operations:
opcodes to be implemented https://gouda.msudenver.edu/moodle/mod/assign/view.php?id=8558
Postfix?

As a developer, I will need to create the stack for operands because the JVM is a stack-oriented machine:

Push operands onto a stack.

As a developer, I will need to create simple Java files to test my integer operation implementation because I need to make sure I'm interpreting the opcodes correctly:

Was this meant to by a python file test? (It is a java file)

Using a dictionary to select functon to execute
https://stackoverflow.com/questions/9168340/using-a-dictionary-to-select-function-to-execute

def p1(args):
    whatever

def p2(more args):
    whatever

myDict = {
    "P1": p1,
    "P2": p2,
    ...
    "Pn": pn
}

def myMain(name):
    myDict[name]()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3/4/19

https://gist.github.com/tasdikrahman/2bdb3fb31136a3768fac

Moved the test folder that contained unittests to under GitConfused.  Based on research done, under the project there should be two folders.  one
for the code you are writing, and one where you will put your unit tests.

new_project
├── antigravity
│   ├── __init__.py         # make it a package
│   └── antigravity.py
└── test
    ├── __init__.py         # also make test a package
    └── test_antigravity.py


GitConfused
├── jvpm
│   ├── __init__.py         # make it a package
│   └── jvpm.py
└── test
    ├── __init__.py         # also make test a package
    └── test_jvpm.py

Trying to run the unittest with

python3 -m unittest test.test_jvpm_methods

Comes up with ModuleNotFoundError: No module named 'jvpm_methods'
Learned that because our methods do not actually take an input and just execute the code
by doing stack methods, we need to create a stack within each test method.
That way it is able to test itself against the stack that we provide.
